import sbt.ProjectRef
import sbt.State
import com.typesafe.sbteclipse.core.Validation
import com.typesafe.sbteclipse.core.EclipsePlugin.EclipseTransformerFactory
import scala.xml._
import scalaz.Scalaz._
import xml.transform.RewriteRule

/**
 * Add "sourcepath" attribute to libraries in .classpath generated by sbteclipse.
 */
object AddSourcesRule extends RewriteRule {
  lazy val JarPattern = "(.+)/jars/(.+).jar".r

  override def transform(parent: Node): Seq[Node] = {
    val name = parent.label
    val sourcePath = parent \ "@sourcepath" toString
    val kind = parent \ "@kind" toString
    val path = parent \ "@path" toString

    (name, sourcePath, kind, path) match {
      case ("classpathentry", "", "lib", JarPattern(base, artifact)) =>
        val srcPath = base + "/srcs/" + artifact + "-sources.jar"
        parent.asInstanceOf[Elem] % Attribute(None, "sourcepath", Text(srcPath), Null)
      case _ => parent
    }
  }
}

object AddSourcesTransformer extends EclipseTransformerFactory[RewriteRule] {
  override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
    AddSourcesRule.success
  }
}